@mixin column($list) {
    $def_size: 6;
    $len: length($list);

    @if $len == $def_size {
        $gutters: nth($list, 1);
        $bottoms: nth($list, 2);
        $breakpoint: nth($list, 3);
        $size: nth($list, 4);
        $columns: nth($list, 5);
        $breaks_at: nth($list, 6);

        @include at($breakpoint) {
            @include create-column($gutters, $bottoms, $size, $columns, $breaks_at);
        }
    } @else {
        $end: $len / $def_size;
        @for $i from 0 to $end {
            $step: $i * $def_size;
            $gutters: nth($list, $step + 1);
            $bottoms: nth($list, $step + 2);
            $breakpoint: nth($list, $step + 3);
            $size: nth($list, $step + 4);
            $columns: nth($list, $step + 5);
            $breaks_at: nth($list, $step + 6);

            @if ($i + 1) == $end {
                @include at($breakpoint) {
                    @include create-column($gutters, $bottoms, $size, $columns, $breaks_at);
                }
            } @else {
                $next_breakpoint: nth($list, $step + 9);
                @include between($breakpoint, $next_breakpoint) {
                    @include create-column($gutters, $bottoms, $size, $columns, $breaks_at);
                }
            }
        }
    }
}

@mixin create-column($gutters: true, $bottoms: true, $size: 1, $total: 1, $breaks_at: 1) {
    @include width($size, $total, $gutter-width, $breaks_at);

    $wraps_at: $total / $size;

    @if $gutters == true {
        margin-right: $gutter-width;

        &:nth-child(#{$wraps_at}n+#{$wraps_at}) {
            margin-right: 0;
        }
    }

    @if $bottoms == true {
        &:nth-child(n+#{$wraps_at + 1}) {
            margin-top: $gutter-width;
        }
    }
}
